---

- hosts: all

  tasks:

    - name: Installation of build-essential
      become: true
      apt:
        name: build-essential
        update_cache: yes

    - name: Installation of make
      become: true
      apt:
        name: make

    - name: Installation of git
      become: true
      apt:
        name: git

    - name: Installation of bzip2
      become: true
      apt:
        name: bzip2

    - name: Installation of nginx
      become: true
      apt:
        name: nginx

    - name: Check if Anaconda is installed; if you see error, ignore it!
      shell: "/home/{{ user }}/anaconda3/bin/conda --version"
      register: anaconda_installed
      ignore_errors: true

    - name: Download Anaconda
      ansible.builtin.get_url:
        url: "{{ anaconda_url }}"
        dest: "/home/{{ user }}"
        mode: '0770'
      when: anaconda_installed.rc != 0

    - name: Install Anaconda
      shell: "/home/{{ user }}/{{ anaconda_install_script }} -b -u -p /home/{{ user }}/anaconda3"
      when: anaconda_installed.rc != 0

    - name: Add Anaconda bin to path
      become: true
      shell: "echo export PATH=/home/{{ user }}/anaconda3/bin:$PATH >> /etc/profile"
      when: anaconda_installed.rc != 0

    - name: Initialize anaconda
      shell: "/home/{{ user }}/anaconda3/bin/conda init"
      when: anaconda_installed.rc != 0

    - name: Set read permission for all on the Anaconda folder
      file:
        path: "/home/{{ user }}/anaconda3"
        mode: +r
        recurse: yes
      when: anaconda_installed.rc != 0

    - name: Conda - execution permission for all
      file:
        path: "/home/{{ user }}/anaconda3/bin"
        mode: +x
        recurse: yes
      when: anaconda_installed.rc != 0

    - name: Check if the folder is cloned
      stat:
        path: "/home/{{ user }}/csle"
      register: git_folder_stat

    - name: Clone CSLE
      ansible.builtin.git:
        repo: "{{ csle_git_repo_url }}"
        dest: "/home/{{ user }}/csle"
        single_branch: yes
        version: master
      when: not git_folder_stat.stat.exists

    - name: Update configuration file
      copy:
        dest: "/home/{{ user }}/csle/config.json"
        content: "{{ csle_config | to_json(indent=4, sort_keys=True) }}"

    - name: Check if csle home environment variable already exists in .bashrc; if you see error, ignore it!
      shell: grep -qxF 'export CSLE_HOME=/home/{{ user }}/csle' "/home/{{ user }}/.bashrc"
      register: variable_exists
      ignore_errors: true

    - name: Add environment variable to .bashrc if not already present
      lineinfile:
        path: "/home/{{ user }}/.bashrc"
        line: "export CSLE_HOME=/home/{{ user }}/csle"
      when: variable_exists.rc != 0

    - name: Check if CSLE log directory exists
      become: true
      stat:
        path: /var/log/csle
      register: log_directory_exists

    - name: Create the CSLE log directory
      become: true
      ansible.builtin.file:
        path: /var/log/csle
        state: directory
        mode: "0774"
        owner: "{{ user }}"
      when: not log_directory_exists.stat.exists

    - name: Check if CSLE tmp directory exists
      become: true
      stat:
        path: /tmp/csle
      register: tmp_directory_exists

    - name: Create the CSLE tmp directory
      become: true
      ansible.builtin.file:
        path: /tmp/csle
        state: directory
        mode: "0774"
        owner: "{{ user }}"
      when: not tmp_directory_exists.stat.exists

    - name: Add or modify the sudoers configuration
      become: true
      lineinfile:
        path: /etc/sudoers
        line: "{{ user }} ALL= NOPASSWD: /usr/sbin/service docker stop, /usr/sbin/service docker start, /usr/sbin/service docker restart, /usr/sbin/service nginx stop, /usr/sbin/service nginx start, /usr/sbin/service nginx restart, /usr/sbin/service postgresql start, /usr/sbin/service postgresql stop, /usr/sbin/service postgresql restart, /bin/kill, /usr/bin/journalctl -u docker.service -n 100 --no-pager -e"
        state: present
        validate: 'visudo -cf %s'  # Validate the sudoers file syntax
