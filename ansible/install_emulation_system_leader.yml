---

- hosts: leader

  vars:
    active: "Active"

  tasks:

    - name: List installed emulation environments
      become: yes
      become_method: sudo
      become_user: postgres
      community.postgresql.postgresql_query:
        db: csle
        login_user: postgres
        login_password: "{{ postgres_password }}"
        query: "SELECT id FROM emulations;"
      register: emulations

    - name: Check if the emulation environments are installed
      set_fact:
        emulation_environments_installed: "{{ emulations.rowcount > 0 }}"

    - name: Installing the emulation environments on the leader node
      shell: "source /home/{{ user }}/anaconda3/bin/activate {{ conda_environment_name }}; cd /home/{{ user }}/csle/emulation-system/envs && make install"
      args:
        executable: /bin/bash
      when: not emulation_environments_installed

    - name: List docker swarm status
      become: true
      shell: "docker node ls"
      args:
        executable: /bin/bash
      register: docker_swarm_status
      changed_when: false
      ignore_errors: yes

    - name: Check if the docker swarm has been initialized
      set_fact:
        swarm_initialized: "{{ docker_swarm_status.rc == 0 and active in docker_swarm_status.stdout }}"

    - name: Initialize Docker Swarm
      become: true
      command: docker swarm init --advertise-addr "{{ leader_ip }}"
      ignore_errors: yes
      when: not swarm_initialized

    - name: List docker swarm join command
      become: true
      shell: "docker swarm join-token worker"
      args:
        executable: /bin/bash
      register: docker_swarm_join_command_output
      changed_when: false

    - name: Extract join token
      set_fact:
        docker_swarm_join_command: "{{ docker_swarm_join_command_output.stdout | regex_search(stdout_regex, multiline=True)}}"
      vars:
        stdout_regex: 'docker swarm join --token (.*)'
