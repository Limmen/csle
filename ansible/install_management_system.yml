---

- hosts: all

  vars:
    nvm_env_var: "$NVM_DIR"
    prometheus: "prometheus"
    node_exporter: "node_exporter"

  tasks:

    - name: Check if nvm is installed; if you see error, ignore it!
      shell: "source /home/{{ user }}/.nvm/nvm.sh && nvm -v"
      args:
        executable: /bin/bash
      register: nvm_installed
      ignore_errors: true

    - name: Download nvm
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh"
        dest: "/home/{{ user }}"
        mode: '0755'
        owner: "{{ user }}"
      when: nvm_installed.rc != 0

    - name: Install nvm
      shell: "/home/{{ user }}/install.sh; export NVM_DIR=/home/{{ user }}/.nvm"
      args:
        executable: /bin/bash
      when: nvm_installed.rc != 0

    - name: Cat the .bashrc file
      shell: "cat /home/{{ user }}/.bashrc"
      args:
        executable: /bin/bash
      register: user_bashrc

    - name: Check if the NVM environment variable is configured
      set_fact:
        nvm_environment_variable_configured: "{{ nvm_env_var in user_bashrc.stdout }}"

    - name: Setup NVM environment variables in bashrc
      lineinfile:
        dest: "/home/{{ user }}/.bashrc"
        line: |
          export NVM_DIR="/home/{{ user }}/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      when: not nvm_environment_variable_configured

    - name: Check if node is installed
      shell: "source /home/{{ user }}/.nvm/nvm.sh && node -v"
      args:
        executable: /bin/bash
      register: nvm_node_installed
      ignore_errors: true

    - name: Using nvm to install node
      shell: "source /home/{{ user }}/.nvm/nvm.sh && nvm install node"
      args:
        executable: /bin/bash
      when:
        - nvm_node_installed.rc != 0
      ignore_errors: true

    - name: Check if npm is installed
      shell: "source /home/{{ user }}/.nvm/nvm.sh && npm -v"
      args:
        executable: /bin/bash
      register: npm_installed
      ignore_errors: true

    - name: Installing npm
      shell: "source /home/{{ user }}/.nvm/nvm.sh && npm install -g npm"
      args:
        executable: /bin/bash
      when:
        - npm_installed.rc != 0
      ignore_errors: true

    - name: Check if the web application is installed
      stat:
        path: "/home/{{ user }}/csle/management-system/csle-mgmt-webapp/node_modules"
      register: web_app_installed
      ignore_errors: true

    - name: Check if the web application is built
      stat:
        path: "/home/{{ user }}/csle/management-system/csle-mgmt-webapp/build"
      register: web_app_built
      ignore_errors: true

    - name: Install and build web application
      shell: "source /home/{{ user }}/.nvm/nvm.sh && cd /home/{{ user }}/csle/management-system/csle-mgmt-webapp && npm install --legacy-peer-deps && npm run build"
      args:
        executable: /bin/bash
      when:
        - not web_app_installed.stat.exists
        - not web_app_built.stat.exists
      ignore_errors: true

    - name: List running docker containers
      become: true
      shell: "docker ps"
      args:
        executable: /bin/bash
      register: docker_containers_list
      changed_when: false

    - name: Copy content of local Nginx file to remote server
      become: true
      copy:
        content: "{{ lookup('file', '{{ nginx_content_name }}') }}"
        dest: /etc/nginx/sites-available/default

    - name: Restart the nginx service
      become: true
      service:
        name: nginx
        state: restarted

    - name: Change permissions on /var/log/nginx
      become: true
      command: sudo chmod -R u+rw /var/log/nginx

    - name: Change ownership of /var/log/nginx
      become: true
      command: sudo chown -R "{{ user }}" /var/log/nginx

    - name: Restart the nginx service
      become: true
      service:
        name: nginx
        state: restarted

    - name: Check if the Prometheus folder exists
      stat:
        path: "/home/{{ user }}/csle/management-system/prometheus"
      register: folder_stat

    - name: Install Prometheus and node exporter
      shell: "cd /home/{{ user }}/csle/management-system && chmod u+x install.sh && ./install.sh"
      args:
        executable: /bin/bash
      when: not folder_stat.stat.exists

    - name: Modify serverIp.js file
      lineinfile:
        path: "/home/{{ user }}/csle/management-system/csle-mgmt-webapp/src/components/Common/serverIp.js"
        regexp: '^const serverIp ='
        line: 'const serverIp = "{{ leader_public_ip }}";'

    - name: Modify serverPort.js file
      lineinfile:
        path: "/home/{{ user }}/csle/management-system/csle-mgmt-webapp/src/components/Common/serverPort.js"
        regexp: '^const serverPort ='
        line: 'const serverPort = "{{ web_port }}";'

    - name: Check if the prometheus environment variable is configured
      set_fact:
        prometheus_path_configured: "{{ prometheus in user_bashrc.stdout }}"

    - name: Add prometheus environment variable to .bashrc
      lineinfile:
        path: "/home/{{ user }}/.bashrc"
        line: "export PATH=/home/{{ user }}/csle/management-system/prometheus/:$PATH"
      when: not prometheus_path_configured

    - name: Check if the node_exporter environment variable is configured
      set_fact:
        node_exporter_path_configured: "{{ node_exporter in user_bashrc.stdout }}"

    - name: Add node_exporter environment variable to .bashrc
      lineinfile:
        path: "/home/{{ user }}/.bashrc"
        line: "export PATH=/home/{{ user }}/csle/management-system/node_exporter/:$PATH"
      when: not node_exporter_path_configured

    - name: CSLE init
      shell: "source /home/{{ user }}/anaconda3/bin/activate {{ conda_environment_name }} && csle init"
      args:
        executable: /bin/bash
      environment:
        CSLE_HOME: "/home/{{ user }}/csle"
      register: CSLE_init_output
