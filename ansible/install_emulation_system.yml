---

- hosts: all

  vars:
    spark_base: "csle_spark_base"
    spark_derived: "csle_spark_1"

  tasks:

    - name: Check if apt keyrings directory exist
      become: true
      stat:
        path: /etc/apt/keyrings
      register: keyrings_directory_exists

    - name: Create keyrings directory if it does not exist
      become: true
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"
      when: not keyrings_directory_exists.stat.exists

    - name: Add Docker GPG apt Key
      become: true
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add repository into sources list
      become: true
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        state: present
        filename: docker

    - name: Update package cache
      become: true
      apt:
        update_cache: yes

    - name: Install Docker packages
      become: true
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Add Docker group
      become: true
      group:
        name: docker
        state: present

    - name: Add user to Docker group
      become: true
      shell: "sudo usermod -aG docker {{ user }}"

    - name: List all docker images
      become: true
      shell: "docker images"
      args:
        executable: /bin/bash
      register: docker_images_list
      changed_when: false

    - name: Check if the base images are pulled
      set_fact:
        base_images_pulled: "{{ spark_base in docker_images_list.stdout }}"

    - name: Check if the derived images are pulled
      set_fact:
        derived_images_pulled: "{{ spark_derived in docker_images_list.stdout }}"

    - name: Pulling base Docker images
      become: true
      shell: "cd /home/{{ user }}/csle/emulation-system/base_images && make pull"
      args:
        executable: /bin/bash
      when: not base_images_pulled

    - name: Pulling derived Docker images
      become: true
      shell: "cd /home/{{ user }}/csle/emulation-system/derived_images && make pull"
      args:
        executable: /bin/bash
      when: not derived_images_pulled

    - name: Set max_map_count kernel parameter
      become: true
      sysctl:
        name: vm.max_map_count
        value: 262144
        sysctl_set: yes
        reload: yes
        state: present

    - name: Add line to limits.conf if not exists
      become: true
      ansible.builtin.lineinfile:
        path: /etc/security/limits.conf
        line: "{{ user }}\tsoft\tnofile\t102400"
        regexp: "^{{ user }}\\s+soft\\s+nofile\\s+102400$"
        state: present
      register: line_added
      changed_when: false

    - name: Add second line to limits.conf if not exists
      become: true
      ansible.builtin.lineinfile:
        path: /etc/security/limits.conf
        line: "{{ user }}\thard\tnofile\t1024000"
        regexp: "^{{ user }}\\s+hard\\s+nofile\\s+1024000$"
        state: present
      register: line_added
      changed_when: false

    - name: Set fs.inotify.max_user_watches in sysctl.conf
      become: true
      ansible.builtin.shell: "echo 'fs.inotify.max_user_watches=524288' | sudo tee -a /etc/sysctl.conf"

    - name: Reload sysctl
      become: true
      ansible.builtin.shell: "sudo sysctl -p"
